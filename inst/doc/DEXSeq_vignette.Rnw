%\VignetteIndexEntry{Analyzing differential exon usage using RNA-seq}
%\VignettePackage{DEXSeq}

\documentclass{article}

\usepackage{Sweave}
\usepackage[a4paper]{geometry}
\usepackage{hyperref,graphicx}
\usepackage{cite}

\SweaveOpts{keep.source=FALSE,eps=FALSE,include=FALSE,height=4.5, width=4} 
\newcommand{\Robject}[1]{\texttt{#1}}
\newcommand{\Rpackage}[1]{\textit{#1}}
\newcommand{\Rclass}[1]{\textit{#1}}
\newcommand{\Rfunction}[1]{{\small\texttt{#1}}}

\title{\textsf{\textbf{Analyzing differential exon usage using RNA-seq}}}
\author{Simon Anders \\ Alejandro Reyes}

\begin{document}
\maketitle
\begin{abstract}
RNA-seq is a powerful tool for transcriptome studies, providing novel discovery of
splice sites and isoforms and allowing the quantification and comparison between samples.
There are several methods that try to call differential expression between conditions, but just a few make
a proper estimation of the dispersion between biological replicates \cite{edgeR, DESeq} and none 
of them focus on the exon level expression, i.e differential exon usage. 
In this package we provide a method to systematically detect differential exon usage using RNA-seq. 
We use as input the number of reads falling on each of the
exons of a genome. To give a demonstration of this Bioconductor package implementation
we will use the package \Rpackage{pasilla} which contains preprocessed data from
GEO Data set database under the record GSE18508 \cite{psKD}. For more information 
of the preprocessing of this dataset, please take a look to the vignette of the \Rpackage{pasilla}.
\end{abstract}
\section{Starting with DEXSeq}
\normalsize
\subsection{\Rclass{ExonCountSet} object via \texttt{HTSeq}}
Apart from the analysis for differential exon usage, DEXSeq provides a visualization function 
(\texttt{plotDEXSeq}) and a HTML report generator (\Rfunction{DEXSeqHTML}) for the visualization 
and exploration of the results, but this requires information about the transcript annotation.  
To this extend, DEXSeq provides two python HTSeq scripts, dexseq\_prepare\_annotation.py and 
dexseq\_count.py.  The first script parses an annotation gtf file to define non-overlapping 
exonic regions: e.g. if a gene contains 2 exons that overlap, the script would define 2 exonic 
regions for the non-overlapping part of each exon and a third one for the overlapping part. 
It gives as output a second gtf file with the defined aggregated exonic regions.  The script 
dexseq\_count.py takes the gtf file provided by dexseq\_prepare\_annotation.py and an alignment 
in sam format and counts the number of reads falling in each of the defined exonic regions. 
\\
The DEXSeq function \Rfunction{read.HTSeqCounts} is able to read the output of these scripts 
and returns an ExonCountSet object with the proper information to make the analysis for 
differential exon usage as well as to generate the visualization of the results. If preferred, 
the user could also insert the annotation information manually to the ExonCountSet object 
directly after creating it. The example files can be seen with the function \Rfunction{system.file}.
For more details about the data set information see the vignette of the package \Rpackage{pasilla}.
<<echo=TRUE, eval=TRUE, fig=FALSE>>=
library(DEXSeq)
extDir <- system.file("extdata", package="pasilla")
countfiles <- file.path(extDir, dir(extDir, pattern="fb.txt"))
annotationfile <- file.path(extDir, "Dmel.BDGP5.25.62.DEXSeq.chr.gff")
design <- data.frame(
   condition=c("treated", "treated", "treated", "untreated", "untreated", "untreated", "untreated"),
   replicate=c(1:3, 1:4),
   type = c("single-read", "paired-end", "paired-end", "single-read", "single-read", "paired-end", "paired-end"))
ecs <- read.HTSeqCounts(countfiles, design, flattenedfile=annotationfile)
sampleNames(ecs) <- gsub("fb.txt", "", dir(extDir, pattern="fb.txt"))
ecs
varMetadata(featureData(ecs))
@
%$
\subsection{New \Rclass{ExonCountSet} object}
The user can also provide its own data directly to the function \Rfunction{newExonCountSet} without 
using the HTSeq scripts.  To create an \Rclass{ExonCountSet} object, the minimum requirements are a exon count matrix
containing a row for every exon and a column for every sample, a vector or matrix with the design of the samples
and two vectors of gene and exon identificators of the same length as the number of rows of the count matrix.
With this object it is possible to make the analysis for differential exon usage, but the visualization functions
won't be so useful. Information about the exons (e.g. start and end positions) can be given as a data frame to 
the \Rfunction{newExonCountSet} function, or can be added to the \Rclass{ExonCountSet} object after its creation
via the \Rfunction{featureData}.
For more specifics,  see the man pages of \Rfunction{newExonCountSet}.
<<echo=TRUE, eval=TRUE, fig=FALSE>>=
ecs.without.annotation <- newExonCountSet(
   countData=counts(ecs), 
   design=design(ecs), 
   geneIDs=geneIDs(ecs), 
   exonIDs=exonIDs(ecs))

head(fData(ecs.without.annotation))
@
%$
\subsection{ExonCountSet from pasilla}
For the next steps of this vignette we will use the \Robject{pasillaExons} object from the \Rpackage{pasilla} package.
This object is an \Rclass{ExonCountSet} created with a subset of genes from the whole Drosophila melanogaster
annotation file. This is for the purpose of speeding up this vignette. See function \Rfunction{subsetByGenes}
and the vignette contained in the \Rpackage{pasilla} package.
<<echo=TRUE, eval=TRUE, fig=FALSE>>=
data("pasillaExons", package="pasilla")
@
\section{Size Factors and dispersion parameters}
Different samples might be sequenced with different depths, for that reason we introduce size factors 
parameters in order to make the samples sizes comparable.  \Rpackage{DEXSeq} uses the same implementation 
as in \Rpackage{DESeq} \cite{DESeq} using the function \Rfunction{estimateSizeFactors}. The size factors
are estimated as the median of the ratios of observed counts.
<<echo=TRUE, eval=TRUE, fig=FALSE>>=
pasillaExons <- estimateSizeFactors(pasillaExons)
sizeFactors(pasillaExons)
@
When testing for differential expression, one first need to have an estimate of the variance of the 
samples to distinguish between normal technical and biological variation (noise) from real effects 
of the different conditions in changes of gene expression.  However, biological replicates are 
necessary to estimate the dispersion between the samples, and this is not easy to estimate when the 
number of replicates is small, as in most of all RNA-seq experiments. All the same applies for a
differential exon usage analysis.  In order to solve this problem, we make use of the Cox-Reid 
likelihood estimation implemented by the package \Rpackage{edgeR} \cite{edgeR}, and fit a mean
dependent regression over the dispersions, all this is implemented in the function \Rfunction{estimateDispersions}.
One might vary the formula to contemplate other sources of noise (see section 4).
<<echo=TRUE, eval=TRUE, fig=FALSE>>=
pasillaExons <- estimateDispersions(pasillaExons)
head(featureData(pasillaExons)$dispersion)
head(featureData(pasillaExons)$dispersion_CR_est)
@
\section{Testing for differential exon usage}
Having the dispersion estimates and the size factors, its possible to test for differential exon usage 
using a negative binomial distribution. For each gene we make a model frame with the function 
\Rfunction{modelFrameForGene} and use it to fit for every exon a generalized linear model with the 
interaction (formula=sample + exon + condition * I(exon == exonID)) and as a null model the glm 
without the interaction (formula=sample + exon + condition), then we compare the deviances of both 
regressions testing under a chi square distribution. All this is implemented in the function 
\Rfunction{testGeneForDEU}.  The function \Rfunction{testForDEU} will make a call to 
\Rfunction{testGeneForDEU} for all the genes, and will fill the pvalue and padjust slots of the featureData 
of the \Rclass{ExonCountSet} object with the results.  The function \Rfunction{DEUresultTable} will give a summary of the results 
of the tests.
<<echo=TRUE, eval=TRUE, fig=FALSE>>=
head( modelFrameForGene( pasillaExons, "FBgn0010909" ) )
testGeneForDEU( pasillaExons, "FBgn0010909" )
pasillaExons <- testForDEU( pasillaExons )
res <- DEUresultTable(pasillaExons)
table ( res$padjust < 0.1 )
@
%$
\section{Additional sources of noise}
In the last section we did an analysis of differential exon usage ignoring the information regarding
the library type preparation of the samples.  In this section, we take into account this information 
as an additional source noise.  For this the \Rclass{ExonCountSet} object design needs to contain this 
information and this is done by changing the default formulas of the glm's that are fitted in the
functions \Rfunction{estimateDispersions} and \Rfunction{testForDEU}.
<<echo=TRUE, eval=TRUE, fig=FALSE>>=
design(pasillaExons)
head(modelFrameForGene(pasillaExons, "FBgn0010909"))
@
To estimate the dispersion, we change the formula to fit the initial glm taking into account the effect of the 
exon and the library type with interaction of the condition.  This allows the dispersion estimate to contemplate
the variance that is being introduced by mixing different types of libraries.
<<echo=TRUE, eval=TRUE, fig=FALSE>>=
formuladispersion <- count ~ sample + ( exon + type ) * condition
pasillaExons <- estimateDispersions( pasillaExons, formula=formuladispersion )
@
Now, in the actual testing, we will also change the formulas to contemplate the library type preparation. With this
we are sure that the results that we are seeing of the exons are really effect of the condition, and not in the type
of library preparation.
<<echo=TRUE, eval=TRUE, fig=FALSE>>=
formula0 <- count ~ sample + type * exon + condition
formula1 <- count ~ sample + type * exon + condition * I(exon == exonID)
pasillaExons <- testForDEU( pasillaExons, formula0=formula0, formula1=formula1 )
res <- DEUresultTable( pasillaExons )
table( res$padjust < 0.1 )
@
%$
\section{Visualization}
DEXSeq has a function to visualize the results of \Rfunction{testForDEU} with options for plotting the 
normalized counts for each of the exons or the fitted expression estimates of the glm (Figure 1). It has also 
options for the visualization of the transcripts (Figure 2), which provides a good way to visualize 
the possible events of isoform regulation. \\
<<plot1, echo=TRUE, fig=TRUE, height=10, width=15>>=
plotDEXSeq(pasillaExons, "FBgn0010909", cex.axis=1.2, cex=1.3, lwd=1.5)
@
\begin{figure}
\centering
\includegraphics[width=\textwidth]{DEXSeq_vignette-plot1}
\caption{Plot indicating the fitted expression estimates from \texttt{testForDEU}, in red are indicated the exons that showed significance, meaning differential exon usage.}
\label{plot1}
\end{figure}
\normalsize
This is the option of visualizing the transcripts (Figure 2): \\

<<plot2, fig=TRUE, height=10, width=15>>=
plotDEXSeq(pasillaExons, "FBgn0010909", displayTranscripts=TRUE, cex.axis=1.2, cex=1.3, lwd=2, legend=TRUE)
@
\begin{figure}
\centering
\includegraphics[width=\textwidth]{DEXSeq_vignette-plot2}
\caption{The same as figure 1, but plotting it with the annotated transcripts.}
\label{plot2}
\end{figure}
\normalsize
Or visualize the counts normalized by the size factor (Figure 3): \\
<<plot3, fig=TRUE, height=10, width=15>>=
plotDEXSeq(pasillaExons, "FBgn0010909", coefficients=FALSE, norCounts=TRUE, cex.axis=1.2, cex=1.3, lwd=2)
@
\begin{figure}
\centering
\includegraphics[width=\textwidth]{DEXSeq_vignette-plot3}
\caption{Plot indicating the normalized count values in the exon for each of the samples.}
\label{plot3}
\end{figure}
The package also provides an HTML report generator implemented in the function \Rpackage{DEXSeqHTML}.  
This function uses \Rpackage{hwriter} to create a result table with links to plots for the significant results, allowing 
a more detailed exploration of the results. To see an example of it, visit the an example 
\url{http://www.embl.de/~reyes/DEXSeqReport/testForDEU.html}. This report was generated using the code:
<<echo=TRUE, eval=FALSE, fig=FALSE>>=
DEXSeqHTML( pasillaExons, FDR=0.1, color=c("#FF000080", "#0000FF80") )
@
\section{Gene count table}
The user can also create gene count tables with the function \Rfunction{geneCountTable}, which basically sums
all the count exons with the same geneID.  This might be useful to give an input to other packages like 
\Rpackage{DESeq} or \Rpackage{edgeR}.
<<echo=TRUE, eval=TRUE, fig=FALSE>>=
head(geneCountTable(pasillaExons))
@
\bibliography{DEXseq_ref}
\bibliographystyle{plain}
\section{Session Information}
<<echo=TRUE, eval=TRUE, fig=FALSE>>=
sessionInfo()
@ 
\end{document}
